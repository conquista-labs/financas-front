openapi: 3.0.0
paths:
  /pessoas:
    get:
      operationId: PessoasController_findAll
      parameters: []
      responses:
        '200':
          description: Lista de pessoas retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseDto'
      security:
        - access-token: []
      summary: Listar todas as pessoas
      tags:
        - Pessoas
    post:
      operationId: PessoasController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePessoaDto'
      responses:
        '201':
          description: Pessoa criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaResponseDto'
      security:
        - access-token: []
      summary: Criar nova pessoa
      tags:
        - Pessoas
  /pessoas/{id}:
    get:
      operationId: PessoasController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      responses:
        '200':
          description: Pessoa encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaResponseDto'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Buscar pessoa por ID
      tags:
        - Pessoas
    patch:
      operationId: PessoasController_update
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePessoaDto'
      responses:
        '200':
          description: Pessoa atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaResponseDto'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Atualizar pessoa por ID
      tags:
        - Pessoas
    delete:
      operationId: PessoasController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      responses:
        '200':
          description: Pessoa removida com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PessoaResponseDto'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Remover pessoa por ID
      tags:
        - Pessoas
  /auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                example:
                  message: Usuário registrado com sucesso
        '400':
          description: Email já cadastrado
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Email já cadastrado
                  error: Unauthorized
      summary: Registrar novo usuário
      tags:
        - Auth
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: Retorna token de acesso JWT
          content:
            application/json:
              schema:
                example:
                  access_token: jwt.token.aqui
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Credenciais inválidas
                  error: Unauthorized
      summary: Login com email e senha
      tags:
        - Auth
info:
  title: API de finanças M&J
  description: API de controle financeiro do Júnior e da Vivi
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: bearer
      bearerFormat: JWT
      type: http
      in: header
  schemas:
    ApiResponseDto:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          type: object
      required:
        - message
        - data
    PessoaResponseDto:
      type: object
      properties:
        id:
          type: string
          example: uuid-gerado
        nome:
          type: string
          example: Vivi
        email:
          type: string
          example: vivi@email.com
        createdAt:
          format: date-time
          type: string
          example: '2025-07-14T12:34:56Z'
      required:
        - id
        - nome
        - email
        - createdAt
    CreatePessoaDto:
      type: object
      properties:
        nome:
          type: string
          description: Nome da pessoa
        ativo:
          type: boolean
          description: Status da pessoa
        email:
          type: string
          description: Email da pessoa
      required:
        - nome
    UpdatePessoaDto:
      type: object
      properties: {}
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          example: vivi@email.com
        password:
          type: string
          example: '123456'
        nome:
          type: string
          example: Vivi
      required:
        - email
        - password
        - nome
    LoginDto:
      type: object
      properties:
        email:
          type: string
          example: conquista.engcomp@gmail.com
        password:
          type: string
          example: '123456'
      required:
        - email
        - password
