openapi: 3.0.0
paths:
  /pessoas:
    get:
      operationId: PessoasController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Número da página
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Limite de itens por página
          schema:
            default: 10
            type: number
      responses:
        '200':
          description: Lista de pessoas retornada com dasdadasucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPessoasResponse'
      security:
        - access-token: []
      summary: Listar todas as pessoas
      tags:
        - Pessoas
    post:
      operationId: PessoasController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePessoaRequest'
      responses:
        '201':
          description: Pessoa criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePessoaResponse'
      security:
        - access-token: []
      summary: Criar nova pessoa
      tags:
        - Pessoas
  /pessoas/{id}:
    get:
      operationId: PessoasController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      responses:
        '200':
          description: Pessoa encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPessoaResponse'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Buscar pessoa por ID
      tags:
        - Pessoas
    patch:
      operationId: PessoasController_update
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPessoaRequest'
      responses:
        '200':
          description: Pessoa atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditPessoaResponse'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Atualizar pessoa por ID
      tags:
        - Pessoas
    delete:
      operationId: PessoasController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: ID da pessoa
          schema:
            type: string
      responses:
        '200':
          description: Pessoa removida com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletePessoaResponse'
        '404':
          description: Pessoa não encontrada.
      security:
        - access-token: []
      summary: Remover pessoa por ID
      tags:
        - Pessoas
  /auth/register:
    post:
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuário registrado com sucesso
          content:
            application/json:
              schema:
                example:
                  message: Usuário registrado com sucesso
        '400':
          description: Email já cadastrado
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Email já cadastrado
                  error: Unauthorized
      summary: Registrar novo usuário
      tags:
        - Auth
  /auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Retorna token de acesso JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Credenciais inválidas
                  error: Unauthorized
      summary: Login com email e senha
      tags:
        - Auth
  /categorias:
    get:
      operationId: CategoriasController_findAll
      parameters:
        - name: page
          required: false
          in: query
          description: Número da página
          schema:
            default: 1
            type: number
        - name: limit
          required: false
          in: query
          description: Limite de itens por página
          schema:
            default: 10
            type: number
      responses:
        '200':
          description: Lista de categorias retornada com dasdadasucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoriasResponse'
      summary: Listar todas as categorias
      tags:
        - Categorias
    post:
      operationId: CategoriasController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoriaRequest'
      responses:
        '201':
          description: Categoria criada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCategoriaResponse'
      summary: Criar nova Categoria
      tags:
        - Categorias
  /categorias/{id}:
    get:
      operationId: CategoriasController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: ID da categoria
          schema:
            type: string
      responses:
        '200':
          description: Categoria encontrada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoriaResponse'
        '404':
          description: Categoria não encontrada.
      summary: Buscar categoria por ID
      tags:
        - Categorias
    patch:
      operationId: CategoriasController_update
      parameters:
        - name: id
          required: true
          in: path
          description: ID da categoria
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCategoriaRequest'
      responses:
        '200':
          description: Categoria atualizada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditCategoriaResponse'
        '404':
          description: Categoria não encontrada.
      summary: Atualizar categoria por ID
      tags:
        - Categorias
    delete:
      operationId: CategoriasController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: ID da categoria
          schema:
            type: string
      responses:
        '200':
          description: Categoria removida com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteCategoriaResponse'
        '404':
          description: Categoria não encontrada.
      summary: Remover categoria por ID
      tags:
        - Categorias
info:
  title: API de finanças M&J
  description: API de controle financeiro do Júnior e da Vivi
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    access-token:
      scheme: bearer
      bearerFormat: JWT
      type: http
      in: header
  schemas:
    PaginationMeta:
      type: object
      properties:
        page:
          type: number
          example: 1
          description: Página atual
        perPage:
          type: number
          example: 10
          description: Limite de itens por página
        total:
          type: number
          example: 100
          description: Total de itens encontrados
        lastPage:
          type: number
          example: 10
      required:
        - page
        - perPage
        - total
        - lastPage
    Pessoa:
      type: object
      properties:
        id:
          type: string
          example: uuid-gerado
        nome:
          type: string
          example: Vivi
        email:
          type: string
          example: vivi@email.com
        createdAt:
          format: date-time
          type: string
          example: '2025-07-14T12:34:56Z'
      required:
        - id
        - nome
        - email
        - createdAt
    PessoaPaginatedData:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Pessoa'
      required:
        - meta
        - rows
    GetPessoasResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/PessoaPaginatedData'
      required:
        - message
        - data
    GetPessoaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Pessoa'
      required:
        - message
        - data
    CreatePessoaRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da pessoa
        ativo:
          type: boolean
          description: Status da pessoa
        email:
          type: string
          description: Email da pessoa
      required:
        - nome
    CreatePessoaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Pessoa'
      required:
        - message
        - data
    EditPessoaRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da pessoa
        ativo:
          type: boolean
          description: Status da pessoa
        email:
          type: string
          description: Email da pessoa
    EditPessoaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Pessoa'
      required:
        - message
        - data
    DeletePessoaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Pessoa'
      required:
        - message
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          example: vivi@email.com
        password:
          type: string
          example: '123456'
        nome:
          type: string
          example: Vivi
      required:
        - email
        - password
        - nome
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          example: conquista.engcomp@gmail.com
        password:
          type: string
          example: '123456'
      required:
        - email
        - password
    Auth:
      type: object
      properties:
        access_token:
          type: string
          example: jwt.token
      required:
        - access_token
    LoginResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Auth'
      required:
        - message
        - data
    Categoria:
      type: object
      properties:
        id:
          type: string
          example: uuid-gerado
        nome:
          type: string
          example: Alimentação
        tipo:
          type: string
          enum:
            - despesa
            - receita
          example: despesa
        icone:
          type: string
          example: utensils
        cor:
          type: string
          example: '#FF5733'
        createdAt:
          format: date-time
          type: string
          example: '2025-07-17T10:20:30.000Z'
      required:
        - id
        - nome
        - tipo
        - icone
        - cor
        - createdAt
    CategoriaPaginatedData:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/PaginationMeta'
        rows:
          type: array
          items:
            $ref: '#/components/schemas/Categoria'
      required:
        - meta
        - rows
    GetCategoriasResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/CategoriaPaginatedData'
      required:
        - message
        - data
    GetCategoriaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Categoria'
      required:
        - message
        - data
    CreateCategoriaRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da categoria
        tipo:
          type: string
          enum:
            - despesa
            - receita
          description: Tipo da categoria (despesa ou receita)
        icone:
          type: string
          description: Ícone da categoria
        cor:
          type: string
          description: Cor da categoria em hexadecimal
      required:
        - nome
        - tipo
    CreateCategoriaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Categoria'
      required:
        - message
        - data
    EditCategoriaRequest:
      type: object
      properties:
        nome:
          type: string
          description: Nome da categoria
        tipo:
          type: string
          enum:
            - despesa
            - receita
          description: Tipo da categoria (despesa ou receita)
        icone:
          type: string
          description: Ícone da categoria
        cor:
          type: string
          description: Cor da categoria em hexadecimal
    EditCategoriaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Categoria'
      required:
        - message
        - data
    DeleteCategoriaResponse:
      type: object
      properties:
        message:
          type: string
          example: Operação realizada com sucesso
        data:
          $ref: '#/components/schemas/Categoria'
      required:
        - message
        - data
